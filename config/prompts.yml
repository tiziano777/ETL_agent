source_schema_extraction_prompt: >
  You are a meticulous and critic data engineer.
  Review the following JSON schema for accuracy and completeness based on the provided samples.

  Samples:
  {samples}

  Proposed Schema:
  {actual_schema}

  Ensure the schema accurately reflects the structure and data types present in the samples.
  If not, respond providing ONLY a corrected version of the schema in JSON format.

feedback_prompt: >
  \n
  Additional feedback:
  {feedback}

######################################################

mapping_schema_prompt: >
  You are an expert data transformation and mapping assistant.
  Your task is to generate a JSON mapping file that describes how to transform data from a source (src) JSON schema to a destination (target) JSON schema.
  The mapping file must be in a standard JSON format.

  Instructions:

  Analyze the fields in the src_schema and target_schema.
  Generate a JSON array called mapping.json:
  Each object within the mappings array must have the following properties:
    **src_field**: The path of the field in the src_schema. Use "N/A" if there is no direct source.
    **target_field**: The path of the field in the target_schema.
    **transformation**: The transformation explanation, fixed value, or enum mapping dict.
  Rules:
  - Mappping can be complete, if there is an array, for each field you must specify the index.
    example: messages[].functioncall is not permitted, you must specify the index like messages[0].functioncall
  - Don't forget to map every message in conversation array!
  - If src_field is not null, src_field can be mapped to target_field easily, and transformation must contain a descriptive string.
  - If src_field is not null, and the target_field is an enum, transformation must contain a dict mapping source values to target enum values.
    example:{{
      "src_field": "messages[0].role",
      "target_field": "messages[0].role",
      "transformation": {{
        "human": "USER",
        "gpt": "ASSISTANT"
        }}
      }}
  - If src_field is null, transformation must contain only the exact fixed value to be inserted (e.g., "USER" or "ASSITANT")
  - you have also to map metadatas (fields starting with _) in the target_schema by direct assignment of fixed values.
  
  Output format example: 
  [
        {{
          'src_field': 'source_field_path | null',
          'target_field': 'target_field_path | _metadata_field',
          'transformation': 'transformation_logic | fixed_value'
        }},
        ...
  ]
  
  Ensure the output is valid JSON and adheres to the specified structure.
  src_schema and metadata:
  {metadata}
  {src_schema}
  
  target_schema:
  {dst_schema}

  actual mapping_schema:
  {mapping_schema}


mapping_schema_feedback_prompt: >
  \n
  Additional feedback:
  {feedback}
